[{"/Users/Anna/Documents/React-td/src/index.js":"1","/Users/Anna/Documents/React-td/src/Components/App/App.js":"2","/Users/Anna/Documents/React-td/src/Components/ItemList/ItemList.js":"3","/Users/Anna/Documents/React-td/src/Components/Todo/Todo.js":"4","/Users/Anna/Documents/React-td/src/Components/About/About.js":"5","/Users/Anna/Documents/React-td/src/Components/Repositories/Repositories.js":"6","/Users/Anna/Documents/React-td/src/Components/Sort/Sort.js":"7","/Users/Anna/Documents/React-td/src/Components/Item/items.js":"8","/Users/Anna/Documents/React-td/src/Components/InputItem/InputItem.js":"9"},{"size":162,"mtime":1610548954203,"results":"10","hashOfConfig":"11"},{"size":1090,"mtime":1621974254649,"results":"12","hashOfConfig":"11"},{"size":1437,"mtime":1621934674352,"results":"13","hashOfConfig":"11"},{"size":2578,"mtime":1621934674391,"results":"14","hashOfConfig":"11"},{"size":2660,"mtime":1622123484863,"results":"15","hashOfConfig":"11"},{"size":6159,"mtime":1622018311097,"results":"16","hashOfConfig":"11"},{"size":1154,"mtime":1621972239917,"results":"17","hashOfConfig":"11"},{"size":972,"mtime":1621934674351,"results":"18","hashOfConfig":"11"},{"size":1491,"mtime":1621970234144,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1edu4av",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/Users/Anna/Documents/React-td/src/index.js",[],["41","42"],"/Users/Anna/Documents/React-td/src/Components/App/App.js",[],"/Users/Anna/Documents/React-td/src/Components/ItemList/ItemList.js",[],"/Users/Anna/Documents/React-td/src/Components/Todo/Todo.js",[],"/Users/Anna/Documents/React-td/src/Components/About/About.js",["43","44"],"/Users/Anna/Documents/React-td/src/Components/Repositories/Repositories.js",["45"],"import React from 'react';\nimport classnames from 'classnames';\nimport { Octokit } from '@octokit/rest';\nimport Card from '@material-ui/core/Card';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styles from './Repositories.module.css';\nimport starImg from './img/Star.svg';\nimport strokeImg from './img/Stroke.svg';\nimport errorImg from './img/Error.svg';\n\nconst octokit = new Octokit();\n\nclass Repositories extends React.Component {\n  state = {\n    isLoading: true,\n    isError: false,\n    repoList: [],\n    firstRepo: 0,\n    lastRepo: 5\n  }\n\n  onClickBack = () => {\n    this.setState({\n      firstRepo: this.state.firstRepo - 5,\n      lastRepo: this.state.lastRepo - 5,\n    });\n  };\n\n  onClickNext = () => {\n    this.setState({\n      firstRepo: this.state.firstRepo + 5,\n      lastRepo: this.state.lastRepo + 5,\n    });\n  };\n\n  componentDidMount() {\n    octokit.repos.listForUser({\n      username: 'AnnaUm17'\n      }).then(({ data }) => {\n        this.setState({\n          repoList: data,\n          isLoading: false\n        });\n      }).catch(() => {\n        this.setState({\n          isLoading: false,\n          isError: true,\n        });\n      });\n  }\n\n  render() {\n    const { isLoading, isError, repoList, firstRepo, lastRepo } = this.state;\n\n    return (\n      <Card>\n        <div className={styles.wrap}>\n          <h1 className={styles.title}>Репозитории на github.com</h1>\n          { isLoading ? <CircularProgress className={styles.preloader}/> :\n            <div className={styles.inner}>\n                { isError ?\n                  <div className={styles.error_container}>\n                    <img src={ errorImg } alt='Error' className={styles.error_img} />\n                    <h2 className={styles.error_subtitle}>Что-то пошло совсем не так...</h2>\n                    <p className={styles.error_text}>Попытка\n                      <a href=\"#\" onClick={() => window.location.reload()} className={styles.error_link}> загрузить </a>\n                    еще раз</p>\n                  </div> :\n                    <div>\n                      { repoList.length === 0 ?\n                        <div className={styles.error_container}>\n                          <img src={ errorImg } alt='Error' className={styles.error_img} />\n                          <h2 className={styles.error_subtitle}>Репозитории отутствуют</h2>\n                          <p className={styles.error_text}>Добавьте как минимум один репозиторий на&ensp;\n                            <a href='https://github.com' target='_blank' rel='noopener noreferrer' className={styles.error_link}>github.com</a>\n                          </p>\n                        </div> :\n                          <div>\n                            {!isLoading && <ol className={styles.list}>\n                              {repoList.slice(firstRepo, lastRepo).map(repo => (\n                                <li key={repo.id} className={styles.list__item}>\n                                  <a href={repo.html_url} target='_blank' rel='noopener noreferrer' className={styles.name}>{repo.name}</a>\n                                  <div className={styles.info}>\n                                    <div className={\n                                      classnames({\n                                        [styles.circle]: true,\n                                        [styles.html]: repo.language === 'HTML',\n                                        [styles.css]: repo.language === 'CSS',\n                                        [styles.js]: repo.language === 'JavaScript'\n                                      })}\n                                    >\n                                    </div>\n                                    <p className={styles.language}>{repo.language}</p>\n                                    <div className={styles.star}>\n                                      <img src={ starImg } alt='Star' />\n                                      <p>{repo.stargazers_count}</p>\n                                    </div>\n                                    <div className={styles.forks}>\n                                      <img src={ strokeImg } alt='Stroke' />\n                                      <p>{repo.forks}</p>\n                                    </div>\n                                      <p className={styles.update}>Updated on {new Date(repo.updated_at).toLocaleString('en-GB', {\n                                        day: 'numeric',\n                                        month: 'short',\n                                        year: 'numeric'\n                                      })}</p>\n                                  </div>\n                                </li>))}\n                            </ol>}\n                            <div className={styles.pagination}>\n                              <button\n                                className={classnames({\n                                  [styles.button]: true,\n                                  [styles.disabled]: firstRepo === 0\n                                })}\n                                onClick={() => this.onClickBack()}\n                                disabled={firstRepo === 0}\n                              >\n                                Назад\n                              </button>\n                              <button\n                                className={classnames({\n                                    [styles.button]: true,\n                                    [styles.disabled]: repoList.length <= lastRepo\n                                })}\n                                onClick={() => this.onClickNext()}\n                                disabled={repoList.length <= lastRepo}\n                              >\n                                Далее\n                              </button>\n                            </div>\n                          </div>\n                      }\n                    </div>\n                }\n            </div>\n          }\n        </div>\n      </Card>\n    );\n  }\n}\n\nexport default Repositories;\n","/Users/Anna/Documents/React-td/src/Components/Sort/Sort.js",[],"/Users/Anna/Documents/React-td/src/Components/Item/items.js",[],"/Users/Anna/Documents/React-td/src/Components/InputItem/InputItem.js",["46","47"],"import React from 'react';\nimport classnames from 'classnames';\nimport styles from './InputItem.module.css';\nimport buttonImg from './img/add.svg';\n\nclass InputItems extends React.Component {\n  state = {\n    inputValue: '',\n    error: false,\n    repeat: false\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.inputValue === '') {\n      this.setState({\n          error: true,\n          repeat: false\n      })\n    } else if (this.props.items.find(item => item.value === this.state.inputValue)) {\n      this.setState({\n          repeat: true\n      })\n    } else {\n      this.setState({\n          inputValue: '',\n          error: false,\n          repeat: false\n      })\n      this.props.onClickAdd(this.state.inputValue);\n    }\n  }\n\n  render() {\n    const { onClickAdd, items } = this.props;\n\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        className={classnames({\n          [styles.form]: true,\n          [styles.error]: this.state.error,\n          [styles.repeat]: this.state.repeat\n        })}>\n        <input\n          type='text'\n          placeholder={'Просто введите сюда название дела...'}\n          value={this.state.inputValue}\n          onChange={event => this.setState({inputValue: event.target.value})}\n          className={styles.input}\n        />\n        <button className={styles.btn}>\n          <img src={buttonImg} alt='Button'/>\n        </button>\n      </form>);\n  }\n};\n\nexport default InputItems;\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":59,"column":12,"nodeType":"58","endLine":59,"endColumn":51},{"ruleId":"56","severity":1,"message":"57","line":66,"column":23,"nodeType":"58","endLine":66,"endColumn":106},{"ruleId":"52","severity":1,"message":"59","line":36,"column":13,"nodeType":"54","messageId":"55","endLine":36,"endColumn":23},{"ruleId":"52","severity":1,"message":"60","line":36,"column":25,"nodeType":"54","messageId":"55","endLine":36,"endColumn":30},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'onClickAdd' is assigned a value but never used.","'items' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]